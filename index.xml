<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yuhua Cai</title>
    <link>https://yc392.github.io/</link>
    <description>Recent content on Yuhua Cai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Yuhua Cai Duke 2021</copyright>
    <lastBuildDate>Wed, 04 Nov 2020 22:28:00 +0200</lastBuildDate>
    
	<atom:link href="https://yc392.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About Me</title>
      <link>https://yc392.github.io/about-me/</link>
      <pubDate>Thu, 09 Jul 2020 16:57:33 -0400</pubDate>
      
      <guid>https://yc392.github.io/about-me/</guid>
      <description>This is Yuhua Cai.
Education Duke University
Master of Engineering in Electrical and Computer Engineering
Data Analyst and Machine Learning Engineer
Hobby Basketball
Contact Me Email: yuhua.cai@duke.edu</description>
    </item>
    
    <item>
      <title>Build My Personal Blog with Hugo and Github Pages</title>
      <link>https://yc392.github.io/build-my-personal-blog-with-hugo-and-github-pages/</link>
      <pubDate>Sun, 23 Aug 2020 20:14:38 +0530</pubDate>
      
      <guid>https://yc392.github.io/build-my-personal-blog-with-hugo-and-github-pages/</guid>
      <description>Introduction Hugo is one of the most popular open-source static generator and is written in GO. It is simple and easy to deploy. And Github Pages is a static web hosting service provided by Github which provides convenient deployment directly through Github repository.
In this brief post I’ll walk you through how I created this website in 5 simple steps using Hugo and GitHub Pages. Step 1: Install Hugo and get a GitHub account As I’m a mac user, I’ll provide instructions here for installing Hugo on macOS.</description>
    </item>
    
    <item>
      <title>Three Euler Project Problems</title>
      <link>https://yc392.github.io/euler/</link>
      <pubDate>Tue, 01 Sep 2020 22:28:00 +0200</pubDate>
      
      <guid>https://yc392.github.io/euler/</guid>
      <description>Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. In this post, three problems solved from the Euler Project using Python. Every function was annotated with nuympy-styple docstrings.
1001st prime Problem 7	(420680 Solved) By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10, 001st prime number?</description>
    </item>
    
    <item>
      <title>Malaria Data Visualization</title>
      <link>https://yc392.github.io/malaria-data-visualization/</link>
      <pubDate>Tue, 08 Sep 2020 20:14:38 +0530</pubDate>
      
      <guid>https://yc392.github.io/malaria-data-visualization/</guid>
      <description>Three informative visualizations about malaria are created using Python, starting with the data sets at https://github.com/rfordatascience/tidytuesday/tree/master/data/2018/2018-11-13.
Malaria Dataset Malaria Dataset includes 3 informative datasets.
3 Datasets   malaria_inc.csv - Malaria incidence by country for all ages across the world across time.
  malaria_deaths.csv - Malaria deaths by country for all ages across the world and time.
  malaria_deaths_age.csv - Malaria deaths by age across the world and time.</description>
    </item>
    
    <item>
      <title>SQLite3 schema for Spotify dataset in 3NF</title>
      <link>https://yc392.github.io/spotify/</link>
      <pubDate>Tue, 06 Oct 2020 22:28:00 +0200</pubDate>
      
      <guid>https://yc392.github.io/spotify/</guid>
      <description>Description: Download the Spotify songs data set. Create a SQLite3 schema to store this data in at least 3rd normal form (3NF), and populate the tables. Use an SQL query to find the names of all playlists that contain instrumentals.
Spotify Songs Dataset First, let&amp;rsquo;s download and see the dataset we gonna use. It is a dataset of Spotify songs.
df = pd.read_csv(&#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv&#39;)` df    track_id track_name track_artist track_popularity track_album_id track_album_name track_album_release_date playlist_name playlist_id playlist_genre &amp;hellip; key loudness mode speechiness acousticness instrumentalness liveness valence tempo duration_ms      0 6f807x0ima9a1j3VPbc7VN I Don&amp;rsquo;t Care (with Justin Bieber) - Loud Luxur&amp;hellip; Ed Sheeran 66 2oCs0DGTsRO98Gh5ZSl2Cx I Don&amp;rsquo;t Care (with Justin Bieber) [Loud Luxury&amp;hellip; 2019-06-14 Pop Remix 37i9dQZF1DXcZDD7cfEKhW pop &amp;hellip; 6 -2.</description>
    </item>
    
    <item>
      <title>PhDs Dataset Exploration and Dashboard Deployment</title>
      <link>https://yc392.github.io/phds/</link>
      <pubDate>Wed, 04 Nov 2020 22:28:00 +0200</pubDate>
      
      <guid>https://yc392.github.io/phds/</guid>
      <description>Description: Play with PhDs awarded in the US dataset. Do some analysis in pandas. Make a dashboard visualization of a few interesting aspects of the data using streamlit.
About Dataset Data presented in Doctorate Recipients from U.S. Universities: 2017 were collected by the Survey of Earned Doctorates (SED). The Survey collects data on the number and characteristics of individuals receiving research doctoral degrees from U.S. academic institutions. There are 72 tables in total in this dataset.</description>
    </item>
    
    <item>
      <title>Data Request and Extract From Star Wars ApI</title>
      <link>https://yc392.github.io/starwar/</link>
      <pubDate>Wed, 21 Oct 2020 22:28:00 +0200</pubDate>
      
      <guid>https://yc392.github.io/starwar/</guid>
      <description>Description: Using the requests library, download all the people in the Star Wars universe using the Star Wars API (https://swapi.dev/documentation). Show the name of the oldest person (or robot or alien) and list the titles of all the films they appeared in.
The Requests Package The requests module allows us to send HTTP requests using Python.
The HTTP request returns a Response Object with all the response data (content, encoding, status, etc).</description>
    </item>
    
    <item>
      <title>Support Vector Machine</title>
      <link>https://yc392.github.io/support-vector-machine/</link>
      <pubDate>Tue, 15 Sep 2020 16:57:33 -0400</pubDate>
      
      <guid>https://yc392.github.io/support-vector-machine/</guid>
      <description>LINEAR SVM Due Date : 9/28 Monday 10:15 PM EST import numpy as np import matplotlib.pyplot as plt import scipy.io as io import libsvm from libsvm.svmutil import * import pandas as pd %matplotlib inline 3.1 Linear Support Vector Machine on toy data 3.1.1 Generate a training set of size $100$ with 2D features (X) drawn at random as follows:
 X_{neg} $\sim$ $\mathcal{N}$($[-5, -5]$, 5*$I_2$) and correspond to negative labels (-1) X_{pos} $\sim$ $\mathcal{N}$($[5, 5]$, 5*$I_2$) and correspond to positive labels (+1) Accordingly, $X = [X_{neg}, X_{pos}]$ is a $100\times2$ array, Y is a $100\times1$ array of values $\in {-1, 1}$.</description>
    </item>
    
    <item>
      <title>CART4.5, ID3 and Random Forest</title>
      <link>https://yc392.github.io/cart4.5-id3-and-random-forest/</link>
      <pubDate>Sun, 13 Sep 2020 16:57:33 -0400</pubDate>
      
      <guid>https://yc392.github.io/cart4.5-id3-and-random-forest/</guid>
      <description>Instructions  If there is a conflict bewteen the problem description in the ipython notebook and the question in the pdf, follow the question in the pdf file. The part you need to fill in is commented as &amp;ldquo;Code Clip&amp;rdquo;. You can search &amp;ldquo;Code Clip&amp;rdquo; in this notebook to find the part you need to complete. After you finish the required part, you may need to run other related code blocks for evaluation or visualization.</description>
    </item>
    
    <item>
      <title>Adaboost</title>
      <link>https://yc392.github.io/adaboost/</link>
      <pubDate>Mon, 14 Sep 2020 22:28:00 +0200</pubDate>
      
      <guid>https://yc392.github.io/adaboost/</guid>
      <description>Boosting a decision stump The goal of this notebook is to implement your own boosting module.
 Go through an implementation of decision trees. Implement Adaboost ensembling. Use your implementation of Adaboost to train a boosted decision stump ensemble. Evaluate the effect of boosting (adding more decision stumps) on performance of the model. Explore the robustness of Adaboost to overfitting.  This file is adapted from course material by Carlos Guestrin and Emily Fox.</description>
    </item>
    
  </channel>
</rss>